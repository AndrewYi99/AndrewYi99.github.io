[{"content":"1.考纲  计算机系统层次结构  计算机系统的基本组成 计算机硬件的基本组成 计算机软件的分类 计算机的工作过程   计算机的性能指标  吞吐量、响应时间、CPU时钟周期、主频、CPI、CPU执行时间 MIPS、MFLOPS、GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS    2.计算机系统的层次结构 2.1 计算机系统的组成 硬件：有形的物理设备\n软件：在硬件上运行的程序和相关的数据文档\n冯诺依曼机\n​\t现代计算机：\n​\t简化后的结构：\n​\t知识回顾：\n​\t1.主存储器的结构 ​\t  主存储器组成\n    MAR：地址寄存器，用于存放访存地址。\n  MDR：数据寄存器，用户暂存从存储器中读写的数据。\n  注意：现代计算机是围绕存储为中心，但是MAR和MDR一般集成在CPU中\n    2.运算器的结构 ​\t 运算器：用于实现算术运算（加减乘除），逻辑运算（如：与或非）  ACC（Accumulator ）：累加器，用于存放操作数，或运算结果。 MQ（Multiple-Quotient Register）：乘商寄存器，在乘除运算时，用于存放操作数，或运算结果。 X：通用的操作数寄存器，存放操作数 ALU（Arithmetic and Logic Unit）：算术逻辑单元，通过内部复杂的电路实现算术运算、逻辑运算。    3. 控制器的结构  CU（Control Unit）：控制单元，分析指令，给出控制信号 IR（Instruction Register）:指令寄存器，存放当前执行的指令。 PC（Program Counter）：程序计数器，存放下一条指令地址，有自动加1功能。  完成一条指令的步骤：\n 取指令 PC（根据PC中的地址来取，存放到IR中） 分析指令 IR 执行指令 CU  2.2计算机的指令工作过程   操作码与操作性质：\n     高级语言代码：\n  int a = 2,b = 3,c = 1,y = 0; void main(){ y = a*b+c; }      编译装入主存 - \u0026gt; 机器语言\n   存储单元的字长为16bit(位) 计算机结构：    指令具体执行过程：\n   程序执行前，首先将程序的起始地址存放在PC中，取指令时，将PC的内容作为地址访问主存。 初始状态:(PC) = 0，程序寄存器指向第一条指令的存储地址。 #1:(PC)-\u0026gt;MAR，使得（MAR） = 0 ，地址寄存器中的地址为0.控制器向主存储器指明了接下来要访问0号地址对应的数据，且为读操作。 #3. M(MAR)-\u0026gt;MDR:将M[MAR]中的内容存放到MDR中。使得（MDR） = 000001 0000000101 #4.将（MDR）-\u0026gt;IR （指令寄存器）：导致(IR) = 000001 0000000101 #5.OP(IR)-\u0026gt;CU:指令的操作码，送到CU进行分析，得知为“取数”指令 #6.Ad(IR)-\u0026gt;MAR：指令的地址码=0000000101送到MAR，导致(MAR)=5, 5号存储单元所对应的原始数据为a= 2 #8.M(MAR)-\u0026gt;MDR,故此时(MDR) = 0000000000000010=2 #9. (MDR)-\u0026gt;ACC，使得(ACC) = 0000000000000010=2。此时一个变量的值已经放在ACC中了。  取指令(#1 - #4) 该动作完成后，PC自动加1 分析指令(#5) 执行取数指令(#6-#9)      以上动作完成后，此时：(PC)=1,(ACC) = 2\n  #1.(PC)-\u0026gt;MAR,（MAR） = 1 #3.M（MAR）-\u0026gt;MDR, (MDR) = 00100 0000000110 #4.(MDR)-\u0026gt;IR,(IR) = 00100 0000000110 #5.OP(IR)-\u0026gt;CU,分析操作码为乘法指令。 #6.Ad(IR)-\u0026gt;MAR:指令的地址码:0000000000000011,送到MAR,使得(MAR) = 6,6号存储单元对应的原始数据为b = 3 #8.M(MAR)-\u0026gt;MDR,(MDR) = 0000000000000011 = 3. #9.（MDR）-\u0026gt;MQ,使得(MQ) = 0000000000000011 = 3 #10. (ACC) - \u0026gt;x,导致(x) = 2 #11.(MQ)*(x)-\u0026gt;ACC,由ALU实现乘法计算，导致（ACC） = 6，若乘积太大需要MQ辅助存储。  取指令(#1 - #4) 该动作完成后，PC自动加1 分析指令(#5) 执行乘法指令(#6-#11)      以上动作完成后：（PC） = 2，（ACC） = 6\n  #1： （PC）-\u0026gt;MAR,(MAR) = 2 #3: M(MAR)-\u0026gt;MDR,(MDR) = 000011 0000000111 #4:(MDR)-\u0026gt;IR,(IR) = 000011 0000000111 #5:OP(IR)-\u0026gt;CU，指令的操作码送到CU，CU分析后为加法指令。 #6：Ad(IR)-\u0026gt;MAR,指令的地址码送到MAR，(MAR) = 7. #8:M(MAR)-\u0026gt;MDR,导致(MDR) = 0000000000000001 = 1 #9:（MDR）-\u0026gt;x,导致(x) -\u0026gt; 0000000000000001 = 1 #10:(ACC)+(x) -\u0026gt;ACC，导致(ACC)=7，由ALU实现加法运算。  取指令(#1 - #4) 该动作完成后，PC自动加1 分析指令(#5) 执行乘法指令(#6-#10)      以上动作完成后，（PC）=3，执行后，（ACC）=7\n  #1：(PC)-\u0026gt;MAR,(MAR) = 3 #3:M(MAR)-\u0026gt;MDR,(MDR) = 000010 0000001000 #4:M(MDR)-\u0026gt;IR,（IR） = 000010 0000001000 #5:OP(IR)-\u0026gt;CU,CU分析后，得知为存数指令。 #6:Ad(IR)-\u0026gt;MAR,(MAR) = 0000001000 = 8,地址单元为8. #7:（ACC）-\u0026gt;MDR,(MDR) = 7 #9:(MDR)-\u0026gt;MAR (地址为8的存储单元)，(MAR) = 7,y = 7.    经过以上动作，(PC)=4\n  #1:(PC)-\u0026gt;MAR,(MAR) = 4 #3:(MAR)-\u0026gt;MDR,(MDR) = 000110 0000000000 #4:(MDR)-\u0026gt;IR,(IR) = 000110 0000000000 #5:OP(IR) -\u0026gt;CU,分析操作数为停机指令 (到此执行结束)    指令的执行过程：\n     本章知识点：\n     2.3 计算机系统层次  直接执行机器语言的实际机器M1     具有翻译功能的汇编程序的计算机M2以及M１     具有三级层次结构的计算机系统     四级：     多级层次结构的计算机系统：     三种级别的语言：   编译程序：将高级语言编写的源程序全部语句一次全部翻译成机器语言程序。而后再执行机器语言程序。（只需要翻译一次） 解释程序：将源程序的一条语句翻译成对应的机器语言的语句，并立即执行。紧接着再翻译下一句。（每次执行都要翻译）   本节重点：      2.4 存储器的性能指标 (1).机器字长  指的是计算机进行一次整数运算（定点整数）所能处理的二进制数据的位数。 通常与CPU的寄存器的位数，加法器有关。 机器字长一般等于内部寄存器的大小，字长越长，数的表示范围越大，计算精度越高。 计算机字长通常选定为字节(8 bit)的整数倍。  (2).数据通路带宽  指数据总线一次所能并行传送信息的位数。 此处为外部数据总线的宽度与内部的数据总线的宽度（内部寄存器的大小）有可能不同。 注：各个子系统通过数据总线连接形成的数据传送路径称为数据通路。  (3).主存容量（总容量）  总容量 = 存储单元的个数*存储字长 bit （ 1Byte= 8 bit） 总容量 = 存储单元的个数*存储字长/8 Byte 例子：MAR为32位，MDR为8位。  则总容量为:2^32 * 8bit = 2^2 * 2^30 B = 4 GB 1 b = 1bit,1 B = 8 bit , 1 K = 1024 = 2^10 ,1 M = 2^20 ,1 G = 2^30    (4).运算速度 ① 吞吐量和响应时间  吞吐量：指系统在单位时间内处理请求的数量。主要与主存的存取周期相关。 响应时间：指从用户向计算机发送一个请求，到系统对该请求所作出的响应并获得所需结果的等待时间。  通常包括CPU时间+等待时间。    ②CPU主频和时钟周期  CPU主频：CPU内数字脉冲信号振荡的频率   每一个波峰，代表一个数字信号。 给CPU动作的执行带来一个“节奏”   CPU主频（时钟频率）= 1/CPU时钟周期（互为倒数关系）  单位：赫兹Hz 10 Hz =\u0026gt; 10个脉冲信号 /s   CPU时钟周期：每一个脉冲信号的时间称为CPU的时钟周期。  单位：微秒、纳秒    ③CPI   （Clock cycle Per Instruction）:执行一条指令所需要的时钟周期数\n  不同的指令，CPI不同，甚至相同的指令，CPI也可能有变化。\n  例题：\n 某CPU主频为1000Hz,某程序包含100条指令，平均来看指令的CPI=3. 该程序在该CPU上执行需要多久？  100 * 3 * 1/1000 = 0.3s      ④CPU执行时间  CPU执行时间(整个程序的耗时) = CPU时钟周期数/主频=（指令条数*CPI）/主频  ⑤IPS(Instructions Per Second)   每秒执行多少条指令\n  IPS= 主频/平均CPI（每秒钟可以执行多少条）\n  KIPS、MIPS\n  ⑥FLOPS（Floating-point Operation Per Second）   每秒钟执行多少次浮点运算。\n  KFLOPS、MFLOPS、GFLOPS、TFLOPS\n  此处的K、M、G、T为数量单位\n K = kilo = 千= 10^3 M=Million=百万 = 10^5 G = Giga = 十亿 = 10^9 T=Tera = 万亿 = 10^12    (5).基准程序   Benchmarks:专门用于进行性能评价的一组程序\n 优点：可以在不同的机器上运行相同的基准程序来比较在不同的机器上运行的时间，从而评测其性能。 缺点：基准程序的性能与某一小段的短代码密切相关，若优化它们后，以至于不能得到准确的性能评测结果。    (6).问题  主频高的CPU一定比主频低的CPU快吗? 答：  不一定，如两个CPU，A的主频为2GHz,平均CPI=10 B的主频为1GHz,平均CPI=1    ","date":"2021-04-18","permalink":"https://andrewyi99.github.io/post/%E8%AE%A1%E7%BB%84_chapter_1/","tags":null,"title":"计组_chapter_1"},{"content":"1.基础命令 关机相关命令  sync：将数据由内存同步到硬盘中 shutdown 关机指令 reboot：重启 等同于 shutdown -r now halt关闭系统:等同于shutdown -h now 以及poweroff  目录结构  /bin：存储常用指令 /boot:系统启动文件 /dev:存储外部文件 /etc:存放所有系统文件 /home:用户目录 /lib:动态链接共享库 /media:光驱等 /opt:额外软件安装目录 /root:系统管理员 /temp:临时目录 /user: /var:存放不断扩充的东西。例如日志文件。  2.遇到的问题 不小心把屏幕设置为竖屏了 将屏幕恢复为正常方向：xrandr -o noraml\n","date":"2021-04-14","permalink":"https://andrewyi99.github.io/post/ubuntu_%E5%91%BD%E4%BB%A4/","tags":null,"title":"Ubuntu_命令"},{"content":"安装Unbuntu虚拟机 1.环境准备    Name Version     win10 20h2   VMware 15.5 pro   Ubuntu     2.安装遇到的问题  分区界面显示不完全  原因：因为使用的中文😒 解决办法:使用English   如何手动分区:  对于Linux的分区，我是一点都不懂。 搜索了很多帖子后。 发现需要分以下的区:(虚拟机分的磁盘为20g)  /boot -200m /swap -8192m / -剩下的全部     sudo apt-get update 出现域名解析错误：  原因是因为vm有部分服务未启动。 参考链接[https://my.oschina.net/u/4410077/blog/3323655]    3.上课老师安装ubuntu20.04 步骤:  自定义新建虚拟机 稍后安装操作系统 选择操作系统:Ubuntu 64位 命名虚拟机为hadoop 选择虚拟机的位置 网络类型：NAT （只要物理机可以上网，虚拟机就可以） 磁盘默认：创建新的虚拟磁盘 磁盘大小20G 磁盘文件放的位置  换源：   ","date":"2021-04-13","permalink":"https://andrewyi99.github.io/post/install_vm_ubuntu/","tags":null,"title":"Install_vm_Ubuntu"},{"content":"gitee + picogo搭建图床 为什么选择用gitee： 1.因为没钱🐵2333 2.因为没有域名(七牛云等图床就只能使用一个月) 3.因为没有备案(很麻烦，现阶段还不想弄) 踩坑： 1. 关于版本的选择 ​\t不知道是不是因为我选择的最新版的原因亦或是其他问题，最开始上传成功一张图片后，后面就再也无法上传图片了。查看日志一直显示undefined。着实让人着急。😿\n所以我选择了稳定版2.2\n​\t2. 关于插件的选择 ​\t最开始看网上教程，发现有两个插件：\n​\t​\t我最开始使用的gitee.\n​\t后来发现如何安装都安装不起，无奈之下选择了第二个插件：gitee-uploader.\n​\t好在最终结果不枉费我折腾半天。🤦‍♂️\n​\t插件配置信息:\n​\tPicGo设置:\n​\t记得日志信息全部打开，这样你在出错的时候可以去看日志信息。\n使用Typoa实现插入图片自动上传 👍使用Typora的插入图片自动上传功能爽歪歪呀，就不用再自己先上传到gitee上。再一张张图片复制url了。\n😺设置非常的简单:\n​\t​\t然后测试上传：\n​\t","date":"2021-04-12","permalink":"https://andrewyi99.github.io/post/gitee%E5%9B%BE%E5%BA%8A/","tags":null,"title":"Gitee图床"},{"content":"搭建我自己的hugo博客 1. 安装并配置hugo环境 (1).所需环境    Name Version     go 1.16.3 windows/amd64   hugo v0.82.0-9D960784 windows/amd64   windows 10    git    github账号    gitee账号    pigo     (2).下载相应文件  先下载好go以及hugo的安装文件。 安装go，会自动配置环境变量。 解压hugo安装文件：  对其配置环境变量：       cmd窗口能够得到他们的版本号，则安装成功：      (3).开始搭建hugo  新建站点:  hugo new site [yoursitename]       使用主题（**注意:**必须要使用主题才能让页面正常显示）  先去主题网站下载主题：https://themes.gohugo.io/     下载好后，修改文件夹名称     然后将其移动到博客目录(站点目录)下的theme文件夹下：     主题文件夹里面的exampleSite文件夹，然后把里面的config.toml文件复制自己博客站点的根目录下，接点击替换就好。     对config.toml进行配置：     创建新文章：posts文件夹下的firstblog.md文章。  hugo new posts/firstblog.md   然后使用命令hugo 会生成public文件夹     hugo server -D本地部署。 一般来说本地环境搭建即可成功。    2. 将hugo部署到github (1).具体步骤   首先你需要注册一个github账号\n  注册github账号流程就不再赘述，网上教程很多\n  注册完成后，需要新建一个仓库，且该仓库与你的账户名同名。\n     因为我已经创建好该仓库了,所以提示我已经存在。\n  在public文件夹下，使用git init 初始化本地仓库。\n  然后依次:\n git add . git commit -m \u0026quot;注释信息\u0026quot; git remote add origin [你的仓库地址] ***[]***中括号记得在写命令时记得删除。     如果是第一次推送:  git push -u origin master   以后再次推送:  git push origin master      等待几分钟后，即可成功看到博客主页面了。\n  (2).开始编写文章  生成文章模板  hexo new post/文章名称.md   使用Typora打开该文章。 记得关闭草稿模式（在当前编辑的文章中）。     使用markdown语法（具体方法请自行搜索） 编写完文章后，可以选择在本地预览，或者直接发布到GitHub上。  本地预览：  在站点根目录使用gitbash:hugo server -D，正常启动成功后，在浏览器输入对应地址即可访问。     此时对文章进行编辑，本地博客内容会同步更新。   当你编辑好文章后，即可发布到远程仓库。  使用hugo命令进行编译。     进入public文件夹，在此使用以下命令:  切换路径:     git add .     git commit -m \u0026quot;注释信息\u0026quot;     git push origin master       若中途无报错，则成功发布文章。     到此处，基本的文章编写和发布就能够实现了。  3. 遇到的问题 (1).页面空白   在进行博客的初始化时，没有使用主题。导致启动服务后，页面空白。\n  解决方案：\n 首先看看你的站点config.toml文件theme是否指定主题。     该主题是否保存在相应目录： 是将主题文件中的config.toml替换站点目录下的config.toml    (2).部署到gitee时，提示：gitee仓库拒绝推送  解决方案:  出现这种情况，一般需要重新生成ssh公钥，并在gitee页面进行添加。    (3).配置无误但是未正常显示主题  可以等待几分钟，然后ctrl+f5强制刷新  (4).编写了文章，但是始终不显示  因为hugo new xx.md创建文章时，默认位草稿模式。 解决方案:关闭草稿模式，才能在编译文章时，在主页面上显示文章。      ","date":"2021-04-11","permalink":"https://andrewyi99.github.io/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","tags":null,"title":"搭建博客"},{"content":"测试显示  hhhhh 图片:      ","date":"2021-04-09","permalink":"https://andrewyi99.github.io/post/firstblog/","tags":null,"title":"Firstblog"}]